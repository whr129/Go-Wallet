// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    user_name,
    hash_password,
    email,
    role
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, user_name, email, hash_password, role, password_changed_at, is_deleted, created_at, updated_at
`

type CreateUserParams struct {
	ID           int64  `json:"id"`
	UserName     string `json:"user_name"`
	HashPassword string `json:"hash_password"`
	Email        string `json:"email"`
	Role         string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.UserName,
		arg.HashPassword,
		arg.Email,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.HashPassword,
		&i.Role,
		&i.PasswordChangedAt,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, user_name, email, hash_password, role, password_changed_at, is_deleted, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.HashPassword,
		&i.Role,
		&i.PasswordChangedAt,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  hash_password = COALESCE($1, hashed_password),
  password_changed_at = COALESCE($2, password_changed_at),
  email = COALESCE($3, email),
  role = COALESCE($4, role),
  is_deleted = COALESCE($5, is_deleted)
WHERE
  id = $6
RETURNING id, user_name, email, hash_password, role, password_changed_at, is_deleted, created_at, updated_at
`

type UpdateUserParams struct {
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	Email             pgtype.Text        `json:"email"`
	Role              pgtype.Text        `json:"role"`
	IsDeleted         pgtype.Bool        `json:"is_deleted"`
	ID                int64              `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.Email,
		arg.Role,
		arg.IsDeleted,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.HashPassword,
		&i.Role,
		&i.PasswordChangedAt,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
